services:
  grafana-ts:
    image: tailscale/tailscale:latest
    container_name: grafana-ts
    hostname: grafana
    volumes:
      - ${PWD}/grafana/tailscale/state:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - NET_ADMIN
      - NET_RAW
    environment:
      - "TS_AUTH_KEY=${TS_AUTH_KEY}"
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_ENABLE_METRICS=${TS_ENABLE_METRICS}
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    network_mode: service:grafana-ts
    user: "${GRAFANA_USER_ID:-$(id -u)}:${GRAFANA_GROUP_ID:-$(id -g)}"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP}
    volumes:
      - ${PWD}/grafana:/var/lib/grafana

  prometheus-ts:
    image: tailscale/tailscale:latest
    container_name: prometheus-ts
    hostname: prometheus
    volumes:
      - ${PWD}/prometheus/tailscale/state:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - NET_ADMIN
      - NET_RAW
    environment:
      - "TS_AUTH_KEY=${TS_AUTH_KEY}"
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_ENABLE_METRICS=${TS_ENABLE_METRICS}
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    network_mode: service:prometheus-ts
    restart: unless-stopped
    user: "${PROMETHEUS_USER_ID:-nobody}:${PROMETHEUS_GROUP_ID:-nogroup}"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=30d"
      - "--web.enable-lifecycle"
    volumes:
      - ${PWD}/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ${PWD}/prometheus/data:/prometheus

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    ports:
      - "9100:9100"
    networks:
      - monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    networks:
      - monitoring

  loadgen:
    build:
      context: ./loadgen
    container_name: loadgen
    restart: unless-stopped
    environment:
      - PROMETHEUS_URL=${PROMETHEUS_URL}
    depends_on:
      - prometheus
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge
